name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ released, prereleased ]

  workflow_dispatch:

jobs:
#  lint:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Run Android Lint (Debug)
#        run: ./gradlew lintDebug
#
#      - name: Upload Lint Report
#        uses: actions/upload-artifact@v4.6.2
#        if: always()
#        with:
#          name: lint-reports-debug
#          path: app/build/reports/lint-results-debug.xml
#
#  ktlint:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Run ktlintFormat
#        run: ./gradlew ktlintFormat
#
#      - name: Check for KTLint violations
#        run: |
#          ./gradlew ktlintCheck
#          if [ $? -ne 0 ]; then
#            echo "KTLint found violations that could not be automatically fixed."
#            exit 1
#          fi
#  detekt:
#    name: Run Detekt Analysis
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Run Detekt and Attempt Auto-Correction
#        run: ./gradlew detekt --auto-correct
#
#      - name: Check for remaining Detekt issues
#        run: ./gradlew detekt
#
#      - name: Upload Detekt reports
#        if: failure()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: detekt-reports
#          path: |
#            **/build/reports/detekt/*.html
#            **/build/reports/detekt/*.xml
#            **/build/reports/detekt/*.txt
#            **/build/reports/detekt/*.sarif
#          retention-days: 7
#  spotless:
#    name: Run Spotless Check
#    runs-on: ubuntu-latest
#    needs: [ lint, ktlint, detekt ]
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Run Spotless Apply
#        run: ./gradlew spotlessApply
#
#      - name: Check for uncommitted Spotless changes
#        run: |
#          git diff --exit-code --quiet
#          if [ $? -ne 0 ]; then
#            echo "SpotlessApply has made changes. Please run './gradlew spotlessApply' locally and commit the changes."
#            exit 1
#          else
#            echo "Spotless check passed. No formatting changes needed or changes were already applied."
#          fi
#
#      - name: Run Spotless Check
#        run: ./gradlew spotlessCheck
#  build_app:
#    name: Build Application
#    runs-on: ubuntu-latest
#    needs: spotless
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug
#
#  test:
#    name: Run Unit Tests
#    runs-on: ubuntu-latest
#    needs: build_app
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Run unit tests
#        run: |
#          ./gradlew :arch-unit-test:testDebugUnitTest \
#                    :example-app:example-app-data:testDebugUnitTest \
#                    :example-app:example-app-domain:testDebugUnitTest \
#                    :example-app:example-app-presentation:testDebugUnitTest
#
#      - name: Upload Test Results
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: unit-test-results
#          path: |
#            arch-unit-test/build/reports/tests/testDebugUnitTest/
#            example-app/example-app-data/build/reports/tests/testDebugUnitTest/
#            example-app/example-app-domain/build/reports/tests/testDebugUnitTest/
#            example-app/example-app-presentation/build/reports/tests/testDebugUnitTest/
#  screenshot_test:
#    runs-on: ubuntu-latest
#    needs: [ build_app, test ]
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#        with:
#          lfs: true
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Verify Paparazzi Screenshots
#        run: |
#          echo "Attempting to verify Paparazzi screenshot tests..."
#          PAPARAZZI_VERIFY_FAILED=false
#
#          echo "Verifying :screenshot:screenshot-canvas-component..."
#          ./gradlew :screenshot:screenshot-canvas-component:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-canvas-component"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawer-component..."
#          ./gradlew :screenshot:screenshot-drawer-component:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawer-component"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type1..."
#          ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type1:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type1"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type2..."
#          ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type2:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type2"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type3..."
#          ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type3:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type3"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type4..."
#          ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type4:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type4"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type5..."
#          ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type5:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type5"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          echo "Verifying :screenshot:screenshot-topbar-component..."
#          ./gradlew :screenshot:screenshot-topbar-component:verifyPaparazziDebug
#          if [ $? -ne 0 ]; then
#            echo "Verification failed for :screenshot:screenshot-topbar-component"
#            PAPARAZZI_VERIFY_FAILED=true
#          fi
#
#          if [ "$PAPARAZZI_VERIFY_FAILED" = true ]; then
#            echo "---------------------------------------------------------------------"
#            echo "ERROR: Paparazzi screenshot verification failed!"
#            echo "This means there are differences between the committed screenshots"
#            echo "and the ones generated from the current code for one or more modules."
#            echo ""
#            echo "Do you want to record new screenshots for these changes?"
#            echo "If so, run the following command(s) locally for the failed module(s) and commit the changes:"
#            echo "  ./gradlew :screenshot:screenshot-canvas-component:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawer-component:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type1:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type2:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type3:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type4:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-drawing-screen:screenshot-drawing-screen-type5:recordPaparazziDebug"
#            echo "  ./gradlew :screenshot:screenshot-topbar-component:recordPaparazziDebug"
#            echo ""
#            echo "If the changes are unexpected, please review your code."
#            echo "---------------------------------------------------------------------"
#            exit 1
#          else
#            echo "All Paparazzi screenshot verifications successful!"
#          fi
#
#      - name: Upload Report for screenshot-canvas-component
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-canvas-component
#          path: screenshot/screenshot-canvas-component/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawer-component
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawer-component
#          path: screenshot/screenshot-drawer-component/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawing-screen-type1
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawing-screen-type1
#          path: screenshot/screenshot-drawing-screen/screenshot-drawing-screen-type1/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawing-screen-type2
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawing-screen-type2
#          path: screenshot/screenshot-drawing-screen/screenshot-drawing-screen-type2/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawing-screen-type3
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawing-screen-type3
#          path: screenshot/screenshot-drawing-screen/screenshot-drawing-screen-type3/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawing-screen-type4
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawing-screen-type4
#          path: screenshot/screenshot-drawing-screen/screenshot-drawing-screen-type4/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-drawing-screen-type5
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-drawing-screen-type5
#          path: screenshot/screenshot-drawing-screen/screenshot-drawing-screen-type5/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
#
#      - name: Upload Report for screenshot-topbar-component
#        if: always()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: report-topbar-component
#          path: screenshot/screenshot-topbar-component/build/reports/tests/testDebugUnitTest/
#          if-no-files-found: warn
  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
#    needs: screenshot_test

    steps:
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Setup Common Environment
        uses: ./.github/actions/setup-environment

      - name: Run Integration Tests with Gordon
        uses: reactivecircus/android-emulator-runner@v2.34.0
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            echo "Waiting for emulator to be ready..."
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
            echo "Emulator is ready."
            
            echo "Starting Gordon Error Flavor tests..."
            ./gradlew gordonError
            echo "Gordon Error Flavor tests finished."
            
            echo "Starting Gordon Normal Flavor tests..."
            ./gradlew gordonNormal
            echo "Gordon Normal Flavor tests finished."
      - name: Upload Gordon Test Results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: gordon-test-results
          path: |
            test-app/build/reports/gordonError
            test-app/build/reports/gordonNormal
#  jacoco_report:
#    name: Generate Combined JaCoCo Coverage Report
#    runs-on: ubuntu-latest
#    needs: [ test, integration_test ]
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Download Unit Test Results (for coverage)
#        uses: actions/download-artifact@v5
#        with:
#          name: unit-test-results
#          path: .
#
#      - name: Download Integration Test Results (for coverage)
#        uses: actions/download-artifact@v5
#        with:
#          name: integration-test-results
#          path: .
#
#      - name: List files to verify download (optional debugging)
#        run: |
#          echo "Listing downloaded unit test coverage data structure:"
#          find . -name "*.exec" -type f
#          echo "Listing downloaded integration test coverage data structure:"
#          find . -name "*.ec" -type f
#          echo "Listing contents of example-app/example-app-data/build/outputs:"
#          ls -R example-app/example-app-data/build/outputs || echo "Path not found"
#          echo "Listing contents of build/outputs (root):" # For aggregated report context
#          ls -R build/outputs || echo "Path not found"
#
#
#      - name: Generate Combined JaCoCo Report
#        run: ./gradlew jacocoAggregatedReport
#
#      - name: Upload JaCoCo Report
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: jacoco-aggregated-report
#          path: build/reports/jacoco/jacocoAggregatedReport/html/
#          if-no-files-found: error
#          retention-days: 7
#  sonarcloud_analysis:
#    name: SonarCloud Analysis
#    runs-on: ubuntu-latest
#    needs: jacoco_report
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#
#      - name: Run SonarCloud Analysis
#        run: ./gradlew sonar \
#          -Dsonar.host.url=https://sonarcloud.io \
#          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
#          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
#          -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
#          -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }} \
#          -Dsonar.scm.revision=${{ github.sha }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#  publish:
#    name: Release build and publish
#    runs-on: macOS-latest
#    needs: sonarcloud_analysis
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Setup Common Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Publish to MavenCentral
#        # replace with publishAndReleaseToMavenCentral when everything works as expected
#        run: ./gradlew publishToMavenCentral --no-configuration-cache
#        env:
#          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
#          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}
#          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_CONTENTS }}